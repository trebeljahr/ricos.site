/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 /Users/rico/projects/convert3D/models_playground/obj/out/glb/cat.glb -o /Users/rico/projects/convert3D/models_playground/obj/out/tsx/cat.tsx --types --transform 
Files: /Users/rico/projects/convert3D/models_playground/obj/out/glb/cat.glb [78.34KB] > /Users/rico/projects/convert3D/models_playground/obj/out/tsx/cat-transformed.glb [9.9KB] (87%)
*/

import * as THREE from "three";
import React from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    cat_body: THREE.Mesh;
    cat_ear: THREE.Mesh;
    cat_white: THREE.Mesh;
    cat_spot: THREE.Mesh;
  };
  materials: {
    body: THREE.MeshStandardMaterial;
    ear: THREE.MeshStandardMaterial;
    white: THREE.MeshStandardMaterial;
    spot: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

interface GLTFAction extends THREE.AnimationClip {
  name: string;
}

export function Cat(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "/3d-assets/glb/cat-transformed.glb"
  ) as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.cat_body.geometry} material={materials.body} />
      <mesh geometry={nodes.cat_ear.geometry} material={materials.ear} />
      <mesh geometry={nodes.cat_white.geometry} material={materials.white} />
      <mesh geometry={nodes.cat_spot.geometry} material={materials.spot} />
    </group>
  );
}

useGLTF.preload("/3d-assets/glb/cat-transformed.glb");
