/*
Auto-generated by: https:
*/

import { useGLTF } from "@react-three/drei";
import { GroupProps } from "@react-three/fiber";
import {
  ForwardedRef,
  forwardRef,
  useEffect,
  useImperativeHandle,
  useRef,
} from "react";
import {
  Group,
  InstancedMesh,
  Mesh,
  MeshStandardMaterial,
  Object3D,
  Vector3,
} from "three";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    PalmTree_1_1: Mesh;
    PalmTree_1_2: Mesh;
    PalmTree_1_3: Mesh;
  };
  materials: {
    Wood: MeshStandardMaterial;
    Green: MeshStandardMaterial;
    DarkGreen: MeshStandardMaterial;
  };
};

const temp = new Object3D();

export function usePalmTree1() {
  const { nodes, materials } = useGLTF(
    "/3d-assets/glb/nature_pack/PalmTree_1.glb"
  ) as unknown as GLTFResult;

  return { nodes, materials };
}

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "/3d-assets/glb/nature_pack/PalmTree_1.glb"
  ) as unknown as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
        <mesh
          geometry={nodes.PalmTree_1_1.geometry}
          material={materials.Wood}
        />
        <mesh
          geometry={nodes.PalmTree_1_2.geometry}
          material={materials.Green}
        />
        <mesh
          geometry={nodes.PalmTree_1_3.geometry}
          material={materials.DarkGreen}
        />
      </group>
    </group>
  );
}

export interface PalmTreeInstanceProps extends GroupProps {
  positions: Vector3[];
  scales?: number[];
  rotations?: number[];
}

export const InstancedPalmTree = forwardRef(function InstancedPalmTree(
  { positions, scales, rotations, ...props }: PalmTreeInstanceProps,
  ref: ForwardedRef<Group>
) {
  const instanceCount = positions.length;
  const groupRef = useRef<Group>(null!);
  const { nodes, materials } = usePalmTree1();

  const woodMeshRef = useRef<InstancedMesh>(null!);
  const greenMeshRef = useRef<InstancedMesh>(null!);
  const darkGreenMeshRef = useRef<InstancedMesh>(null!);

  useImperativeHandle(ref, () => groupRef.current, []);

  useEffect(() => {
    if (
      !woodMeshRef.current ||
      !greenMeshRef.current ||
      !darkGreenMeshRef.current
    )
      return;

    positions.forEach((pos, i) => {
      temp.position.set(pos.x, pos.y, pos.z);

      const scale = scales && scales[i] !== undefined ? scales[i] : 1;

      temp.scale.setScalar(scale);

      temp.updateMatrix();

      woodMeshRef.current.setMatrixAt(i, temp.matrix);
      greenMeshRef.current.setMatrixAt(i, temp.matrix);
      darkGreenMeshRef.current.setMatrixAt(i, temp.matrix);
    });

    woodMeshRef.current.instanceMatrix.needsUpdate = true;
    greenMeshRef.current.instanceMatrix.needsUpdate = true;
    darkGreenMeshRef.current.instanceMatrix.needsUpdate = true;
  }, [positions, scales, rotations]);

  return (
    <group ref={groupRef} {...props}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
        <instancedMesh
          ref={woodMeshRef}
          args={[nodes.PalmTree_1_1.geometry, materials.Wood, instanceCount]}
        />
        <instancedMesh
          ref={greenMeshRef}
          args={[nodes.PalmTree_1_2.geometry, materials.Green, instanceCount]}
        />
        <instancedMesh
          ref={darkGreenMeshRef}
          args={[
            nodes.PalmTree_1_3.geometry,
            materials.DarkGreen,
            instanceCount,
          ]}
        />
      </group>
    </group>
  );
});

useGLTF.preload("/3d-assets/glb/nature_pack/PalmTree_1.glb");
