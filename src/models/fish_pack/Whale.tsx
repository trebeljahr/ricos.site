/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, {
  ForwardedRef,
  forwardRef,
  MutableRefObject,
  useEffect,
  useImperativeHandle,
  useRef,
} from "react";
import { useGLTF } from "@react-three/drei";
import { useAnimationsWithCleanup } from "@hooks/useAnimationsWithCleanup";
import { GLTF } from "three-stdlib";
import { GroupProps } from "@react-three/fiber";
import { Group } from "three";

type GLTFResult = GLTF & {
  nodes: {
    Whale_1: THREE.SkinnedMesh;
    Whale_2: THREE.SkinnedMesh;
    Root: THREE.Bone;
  };
  materials: {
    Top: THREE.MeshStandardMaterial;
    Bottom: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ActionName = "Armature|Swim";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

export function useWhale() {
  const { nodes, materials } = useGLTF(
    "/3d-assets/glb/fish_pack/Whale.glb"
  ) as unknown as GLTFResult;

  return { nodes, materials };
}

export const InstancedWhale = forwardRef(function Whale(
  props: GroupProps,
  outerRef: ForwardedRef<Group>
) {
  const { nodes, materials, animations } = useGLTF(
    "/3d-assets/glb/fish_pack/Whale.glb"
  ) as unknown as GLTFResult;

  const innerRef = useRef<Group>(null!);
  useImperativeHandle(outerRef, () => innerRef.current!, []);

  const { actions } = useAnimationsWithCleanup(animations, innerRef.current);

  useEffect(() => {
    actions["Armature|Swim"]?.play();
  }, [actions]);

  return (
    <group {...props} ref={innerRef}>
      <instancedMesh
        geometry={nodes.Whale_1.geometry}
        material={materials.Top}
      ></instancedMesh>
      <instancedMesh
        geometry={nodes.Whale_2.geometry}
        material={materials.Bottom}
      ></instancedMesh>
    </group>
  );
});

export default function Whale(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>(null!);
  const { nodes, materials, animations } = useGLTF(
    "/3d-assets/glb/fish_pack/Whale.glb"
  ) as unknown as GLTFResult;
  const { actions } = useAnimationsWithCleanup(animations, group.current);

  useEffect(() => {
    actions["Armature|Swim"]?.play();
  }, [actions]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Root_Scene">
        <group name="RootNode">
          <group name="Armature" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <primitive object={nodes.Root} />
          </group>
          <group name="Whale" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Whale_1"
              geometry={nodes.Whale_1.geometry}
              material={materials.Top}
              skeleton={nodes.Whale_1.skeleton}
            />
            <skinnedMesh
              name="Whale_2"
              geometry={nodes.Whale_2.geometry}
              material={materials.Bottom}
              skeleton={nodes.Whale_2.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/3d-assets/glb/fish_pack/Whale.glb");
